@page "/admin/orders"
@inherits OwningComponentBase<IOrderRepository>

<OrderTable StyleTable="bg-warning" TableTitle="Новые заказы" Orders="UnshippedOrders" GetOrders="UnshippedOrders" ButtonLabel="Ожидает выполнения" OrderSelected="ShipOrder" />
<OrderTable StyleTable="bg-success" TableTitle="Выполненые заказы" Orders="ShippedOrders" GetOrders="ShippedOrders" ButtonLabel="Выполнен" OrderSelected="ResetOrder" />

<button class="btn btn-info text-white" @onclick="@(e => UpdateData())">Обновить данные</button>

@code {
	public IOrderRepository Repository => Service;
	public IEnumerable<Order> AllOrders { get; set; } = Enumerable.Empty<Order>();
	public IEnumerable<Order> UnshippedOrders { get; set; } = Enumerable.Empty<Order>();
	public IEnumerable<Order> ShippedOrders { get; set; } = Enumerable.Empty<Order>();

	protected async override Task OnInitializedAsync()
	{
		await UpdateData();
	}

	public async Task UpdateData()
	{
		AllOrders = await Repository.Orders.ToListAsync();
		UnshippedOrders = AllOrders.Where(o => !o.Shipped);
		ShippedOrders = AllOrders.Where(o => o.Shipped);
	}

	public void ShipOrder(int id) => UpdateOrder(id, true);

	public void ResetOrder(int id) => UpdateOrder(id, false);

	private void UpdateOrder(int id, bool shipValue)
	{
		Order? o = Repository.Orders.FirstOrDefault(o => o.OrderID == id);
		if (o != null)
		{
			o.Shipped = shipValue;
			Repository.SaveOrder(o);
		}
	}
}