@page "/admin/products/edit/{id:long}"
@page "/admin/products/create"
@inherits OwningComponentBase<IStoreRepository>
@inject IPopupNotification popupNotification
@inject IFolderManager folderManager

<h3 class="bg-@ThemeColor text-white text-center p-1">@TitleText a Product</h3>
<TabControl>
	<TabPage Text="Товар" IsActive="true">
		<h1 class="">Свойства</h1>
		<EditForm Model="Product" OnValidSubmit="SaveProduct" id="creatProductForm">
			<DataAnnotationsValidator />
			<div class="row row-cols-2">
				<div class="col">
					@if (Product.ProductID != 0)
					{
						<div class="form-group mb-4">
							<label>ID</label>
							<input class="form-control" disabled value="@Product.ProductID" />
						</div>
					}
					<div class="form-group mb-4">
						<label>Название</label>
						<ValidationMessage For="@(() => Product.Name)" />
						<InputText class="form-control" @bind-Value="Product.Name" />
					</div>
					<div class="form-group mb-4">
						<label>Артикул</label>
						<ValidationMessage For="@(() => Product.Artikul)" />
						<InputText class="form-control" @bind-Value="Product.Artikul" />
					</div>
				</div>
				<div class="col">
					<div class="form-group">
						<img class="img-fluid" style="height: 250px;" src=@Product.MainPhoto>
					</div>
				</div>
			</div>
			<div class="form-group mb-4">
				<label>Описание</label>
				<ValidationMessage For="@(() => Product.Description)" />
				<InputTextArea class="form-control" @bind-Value="Product.Description" />
			</div>
			<div class="form-group mb-4">
				<label>Короткое описание</label>
				<ValidationMessage For="@(() => Product.MinDescription)" />
				<InputTextArea class="form-control" @bind-Value="Product.MinDescription" />
			</div>
			<div class="form-group mb-4">
				<label>ID Категории</label>
				<ValidationMessage For="@(() => Product.CategoryId)" />
				<InputSelect @bind-Value="Product.CategoryId" class="form-select">
					<option value="">Выберите категорию</option>
					@foreach (var item in DisplayedCategories)
					{
						<option value="@item.ID">@item.CategoryName</option>
					}
				</InputSelect>
			</div>
			<div class="form-group mb-4">
				<label>Цена</label>
				<ValidationMessage For="@(() => Product!.Price)" />
				@if (Product?.Discount != null && Product.OldPrice != null)
				{
					Product.Price = @PriceProduct((long)Product.OldPrice, (int)Product.Discount);
				}
				else { Product!.Price = Product.Price; }
				<InputNumber class="form-control" @bind-Value="Product.Price" />
			</div>
			<div class="form-group mb-4">
				<label>Скидка %</label>
				<InputNumber class="form-control" @bind-Value="Product.Discount" />
			</div>
			<div class="form-group mb-4">
				<label>Старая цена</label>
				<InputNumber class="form-control" @bind-Value="Product.OldPrice" />
			</div>
			<div class="form-group mb-4">
				<label>Тип</label>
				<ValidationMessage For="@(() => Product.ProductTypeId)" />
				<InputSelect @bind-Value="Product.ProductTypeId" class="form-select">
					<option value="">Выберите тип продукта</option>
					@foreach (var type in ProductTypesData)
					{
						<option value="@type.ID">@type.Name</option>
					}
				</InputSelect>
			</div>
			<div class="form-group mb-4">
				<label>Размер</label>
				<ValidationMessage For="@(() => Product.Size)" />
				<InputText class="form-control" @bind-Value="Product.Size" />
			</div>
			<div class="form-group mb-4">
				<label>Размер базы</label>
				<InputText class="form-control" @bind-Value="Product.BaseSize" />
			</div>
			<div class="form-group mb-4">
				<label>Источник света</label>
				<ValidationMessage For="@(() => Product.LightSource)" />
				<InputText class="form-control" @bind-Value="Product.LightSource" />
			</div>
			<div class="form-group mb-4">
				<label>Длина шнура</label>
				<InputNumber class="form-control" @bind-Value="Product.CordLength" />
			</div>
			<div class="form-group mb-4">
				<label>Мощность</label>
				<ValidationMessage For="@(() => Product.PowerW)" />
				<InputText class="form-control" @bind-Value="Product.PowerW" />
			</div>
			<div class="form-group mb-4">
				<label>Цвет</label>
				<ValidationMessage For="@(() => Product.Color)" />
				<InputText class="form-control" @bind-Value="Product.Color" />
			</div>
			<div class="form-group mb-4">
				<label>Материал</label>
				<ValidationMessage For="@(() => Product.Material)" />
				<InputText class="form-control" @bind-Value="Product.Material" />
			</div>
			<div class="form-group mb-4">
				<label>Цветовая температура</label>
				<ValidationMessage For="@(() => Product.Kelvins)" />
				<InputText class="form-control" @bind-Value="Product.Kelvins" />
			</div>
			<div class="form-group mb-4">
				<label>Наличие</label>
				<ValidationMessage For="@(() => Product.Availability)" />
				<InputCheckbox class="" @bind-Value="Product.Availability" />
			</div>
			<div class="form-group mb-4">
				<label>Теги</label>
				@foreach (var (tag, check) in listIsChecked)
				{
					<input type="checkbox" checked="@check" class="btn-check" id="@tag.Value" autocomplete="@check"
					@onclick="@(e => AddTagsforProduct(tag, check))">
					<label class="btn btn-outline-primary" for="@tag.Value">@tag.Value</label>
				}
			</div>
		</EditForm>
	</TabPage>
	<TabPage Text="Галерея" IsActive=@TabIsActive>
		<EditForm Model="Product" OnValidSubmit="SaveProduct" id="creatProductForm">
			<DataAnnotationsValidator />
			<div class="form-group mb-4">
				<img class="img-fluid" style="height: 250px;" src="@Product.MainPhoto">
				<label>Изображение</label>
				<ImgManagerControl @bind-ChildName="Product.MainPhoto" PathFolder="@urlPath"
					FolderName="@Product.ProductID.ToString()" IsSlider="false" />
			</div>
			<div class="form-group row">
				<ImgManagerControl @bind-ChildName="Product.Photos" PathFolder="@urlPath"
					FolderName="@Product.ProductID.ToString()" IsSlider="true" />
			</div>
		</EditForm>
	</TabPage>
	<TabPage Text="Добавление значений" IsActive="true">
		<EditForm Model="NewTag" OnValidSubmit="CreateNewTag" id="сreateNewTag">
			<DataAnnotationsValidator />
			<div class="row row-cols-2">
				<div class="col">
					<div class="form-group mb-4">
						<label>ID тега</label>
						<input class="form-control" disabled value="@NewTag.ID" />
					</div>
					<div class="form-group mb-4">
						<label>Знаечние тега</label>
						<ValidationMessage For="@(() => NewTag.Value)" />
						<InputText class="form-control" @bind-Value="NewTag.Value" />
					</div>
					<div class="mt-2">
						<button form="сreateNewTag" type="submit" class="btn btn-warning">Добавить тег</button>
						@* <a class="btn btn-secondary" @onclick="@(e => CancellationNewSetting())">Отмена</a> *@
					</div>
				</div>
			</div>
		</EditForm>
		<EditForm Model="Type" OnValidSubmit="CreateTypeProduct" id="createTypeProduct">
			<DataAnnotationsValidator />
			<div class="row row-cols-2">
				<div class="col">
					<div class="form-group mb-4">
						<label>ID типа продкта</label>
						<input class="form-control" disabled value="@Type.ID" />
					</div>
					<div class="form-group mb-4">
						<label>Тип продукта</label>
						<ValidationMessage For="@(() => Type.Name)" />
						<InputText class="form-control" @bind-Value="Type.Name" />
					</div>
					<div class="mt-2">
						<button form="createTypeProduct" type="submit" class="btn btn-warning">Добавить тип</button>
						@* <a class="btn btn-secondary" @onclick="@(e => CancellationNewSetting())">Отмена</a> *@
					</div>
				</div>
			</div>
		</EditForm>
	</TabPage>
</TabControl>
<div class="mt-2">
	<button form="creatProductForm" type="submit" class="btn btn-@ThemeColor">Сохранить</button>
	<NavLink class="btn btn-secondary" href="/admin/products">Отмена</NavLink>
</div>

@code {

	public IStoreRepository Repository => Service;

	[Inject]
	public NavigationManager? NavManager { get; set; }

	[Parameter]
	public long Id { get; set; } = 0;
	public Product Product { get; set; } = new Product();
	public List<Category> DisplayedCategories { get; set; } = new();
	public bool TabIsActive { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		if (Id != 0)
		{
			TabIsActive = true;
			Product = await Repository.Products.FirstOrDefaultAsync(p => p.ProductID == Id) ?? new();
		}
		DisplayedCategories = await Repository.Category.Select(c => c).Distinct().ToListAsync(); //получение категорий
		await UpdateData();
	}

	protected override async Task OnParametersSetAsync()
	{
		if (Id != 0)
		{
			Product = await Repository.Products.FirstOrDefaultAsync(p => p.ProductID == Id) ?? new();
		}
	}

	private string urlPath = "imegs/img-products/";
	public async Task SaveProduct()
	{
		if (Id == 0)
		{
			Repository.CreateProduct(Product);
			await folderManager.CeateDirectoryAsync(urlPath, Convert.ToInt64(Product.ProductID));
			if (Product.ProductID != 0)
			{
				TabIsActive = true;
				GetEditUrl(Convert.ToInt64(Product.ProductID));
				NavManager?.NavigateTo(GetEditUrl(Convert.ToInt64(Product.ProductID)));
				Notification notification = new Notification(1, "Товар сохранен", "Товар добавлен", Product.Name);
				popupNotification.AddItem(notification);
				StateHasChanged();
			}
		}
		else
		{
			Repository.SaveProduct(Product);
			Notification notification = new Notification(1, "Изменения сохранены", "Запись отредактирована", Id.ToString());
			popupNotification.AddItem(notification);
			NavManager?.NavigateTo("/admin/products");
		}
	}

	public string GetEditUrl(long id) => $"/admin/products/edit/{id}";


	public string ThemeColor => Id == 0 ? "primary" : "warning";
	public string TitleText => Id == 0 ? "Create" : "Edit";

	public long PriceProduct(long oldPrice, int discount)
	{
		long price;
		return price = oldPrice - oldPrice * discount / 100;
	}
}

@code {
	public long IdTag { get; set; } = 0;
	public Tag NewTag { get; set; } = new Tag();
	public IEnumerable<Tag> TagsData { get; set; } = Enumerable.Empty<Tag>();

	public List<Tag> ListAddTags { get; set; } = new();
	public List<Tag> DisplayProductTags { get; set; } = new();

	public async Task UpdateData()
	{
		TagsData = await Repository.Tags.ToListAsync();
		ProductTypesData = await Repository.Types.ToListAsync();
		CheckTags(Product.ProductTags.ToList());
		await InvokeAsync(StateHasChanged);
	}

	public async Task CreateNewTag()
	{
		Repository.CreateTag(NewTag);
		await UpdateData();
		@* if (IdTag == 0)
{
Repository.CreateAdditionalField(AdditionalField);
Notification notification = new Notification(1, "Поле сохранено", "Новое поле добавлено", AdditionalField.Name);
popupNotification.AddItem(notification);
await UpdateData();
}
else
{
NewTag.InfoId = FaqPage.ID;
Repository.SaveAdditionalField(AdditionalField);
Notification notification = new Notification(1, "Изменения сохранены", "Дополнительное поле изменено",
AdditionalField.ID.ToString());
popupNotification.AddItem(notification);
await UpdateData();
} *@
	}

	@* public void DeleteInfoProp(InfoProp infoProp)
{
InfoPropToBeDelete = infoProp;
confirmationCheckOnDelete = true;
confirmationTitle = "Удаление дополнительного поля";
confirmation?.Show();
} *@

	private List<(Tag tag, bool isChecked)> listIsChecked = new();
	private void CheckTags(List<Tag> tags)
	{
		foreach (var tag in TagsData)
		{
			if (tags.Where(t => t == tag).Any())
			{
				listIsChecked.Add((tag, true));
			}
			else { listIsChecked.Add((tag, false)); }
		}
	}
	public void AddTagsforProduct(Tag tag, bool isChecked)
	{

		if (!isChecked)
		{
			Product.ProductTags.Add(tag);
		}
		else { Product.ProductTags.Remove(tag); }
	}

	public IEnumerable<ProductType> ProductTypesData { get; set; } = Enumerable.Empty<ProductType>();
	public ProductType Type { get; set; } = new ProductType();
	public async Task CreateTypeProduct()
	{
		Repository.CreateType(Type);
		await UpdateData();
	}
}