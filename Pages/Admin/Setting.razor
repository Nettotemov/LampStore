@page "/admin/settings"
@inherits OwningComponentBase<ISettingsRepository>
@inject IPopupNotification popupNotification

<Confirmation @ref="confirmation" OnCancel="OnCancel" OnConfirm="OnConfirm" IsConfirm="true"
	Title="Удаление страницы о компании...">
	<div class="toast-body">
		Вы уверены что хотите удалить настройку
		@if (SettingToBeDelete != null)
		{
			<p>@SettingToBeDelete.NameSettings ?</p>
		}
	</div>
</Confirmation>
<div class="admin-notification__wrapper">
	<Popup ListNotifications="ListNotifications" />
</div>

<table class="table table-sm table-striped table-bordered">
	<thead>
		<tr>
			<th>ID</th>
			<th>Тип настройки</th>
			<th>Название</th>
			<th>Значение</th>
			<th>Используется</th>
			<td />
		</tr>
	</thead>
	<tbody>
		@if (SettingsData.Count() > 0)
		{
			@foreach (Settings s in SettingsData)
			{
				<tr>
					<td>@s.ID</td>
					<td>@EnumExtensions.GetDisplayName(@s.Setting)</td>
					<td>@s.NameSettings</td>
					<td>@s.Value</td>
					<td>@s.IsVisible</td>
					<td class="text-center">
						<button class="btn btn-info btn-sm" @onclick="@(e => ChangeSetting(s))">
							Изменить
						</button>
						<button class="btn btn-danger btn-sm" @onclick="@(e => DeleteSetting(s))">
							Удалить
						</button>
					</td>
				</tr>
			}
		}
		else
		{
			<tr>
				<td colspan="5" class="text-center">Настройки, не найдены.</td>
			</tr>
		}
	</tbody>
</table>
<EditForm Model="NewSetting" OnValidSubmit="CreateNewSetting">
	<DataAnnotationsValidator />
	@if (NewSetting.ID != 0)
	{
		<div class="form-group">
			<label>ID</label>
			<input class="form-control" disabled value="@NewSetting.ID" />
		</div>
	}
	<div class="form-group">
		<label>Тип Настройки</label>
		<InputSelect class="form-select" @bind-Value="NewSetting.Setting">
			@foreach (var setting in Enum.GetValues<TypeSettings>())
			{
				<option value="@setting">@EnumExtensions.GetDisplayName(setting)</option>
			}
		</InputSelect>
	</div>
	<div class="form-group">
		<label>Название</label>
		<ValidationMessage For="@(() => NewSetting.NameSettings)" />
		<InputText class="form-control" @bind-Value="NewSetting.NameSettings" />
	</div>
	<div class="form-group">
		<label>Значение</label>
		<ValidationMessage For="@(() => NewSetting.Value)" />
		<InputTextArea class="form-control" @bind-Value="NewSetting.Value" />
	</div>
	<div class="form-group">
		<label>Используется</label>
		<ValidationMessage For="@(() => NewSetting.IsVisible)" />
		<InputCheckbox class="" @bind-Value="NewSetting.IsVisible" />
	</div>
	<div class="mt-2">
		<button type="submit" class="btn btn-warning">Сохранить</button>
		<a class="btn btn-secondary" @onclick="@(e => CancellationNewSetting())">Отмена</a>
	</div>
</EditForm>

@code {
	public ISettingsRepository Repository => Service;
	public IEnumerable<Settings> SettingsData { get; set; } = Enumerable.Empty<Settings>();
	public Settings NewSetting { get; set; } = new Settings();
	public int Id { get; set; } = 0;

	public string? value;
	private List<Notification> ListNotifications { get; set; } = new();

	protected async override Task OnParametersSetAsync()
	{
		ListNotifications = await popupNotification.GetItems();
		await UpdateData();
	}
	public async Task UpdateData()
	{
		SettingsData = await Repository.Settings.ToListAsync();
		StateHasChanged();
		await InvokeAsync(StateHasChanged);
	}

	public void DeleteSetting(Settings settings)
	{
		SettingToBeDelete = settings;
		confirmation?.Show();
	}

	public async Task CreateNewSetting()
	{
		if (Id == 0)
		{
			Repository.CreateSettings(NewSetting);
			Notification notification = new Notification(1, "Настройка сохранена", "Запись настройки добавлена",
			NewSetting.NameSettings);
			popupNotification.AddItem(notification);
			await UpdateData();
			CancellationNewSetting();
		}
		else
		{
			Repository.SaveSettings(NewSetting);
			Notification notification = new Notification(1, "Изменения сохранены", "Настройка изменена", NewSetting.ID.ToString());
			popupNotification.AddItem(notification);
			await UpdateData();
			CancellationNewSetting();
		}

	}

	public void ChangeSetting(Settings settings)
	{
		Id = settings.ID;
		NewSetting = Repository.Settings.FirstOrDefault(s => s.ID == Id) ?? new();
	}

	public void CancellationNewSetting()
	{
		if (Id == 0)
		{
			NewSetting.NameSettings = string.Empty;
			NewSetting.Value = string.Empty;
			NewSetting.IsVisible = false;
			NewSetting = new();
		}
		else
		{
			Id = 0;
			NewSetting = new();
		}
	}
}

@code {
	Confirmation? confirmation;
	private Settings? SettingToBeDelete { get; set; }
	private async Task OnConfirm()
	{
		if (SettingToBeDelete != null)
		{
			Repository.DeleteSettings(SettingToBeDelete);
			confirmation?.Hide();
			Notification notification = new Notification(1, "Удаление записи", "Удалена настройка",
			SettingToBeDelete.NameSettings);
			popupNotification.AddItem(notification);
			SettingToBeDelete = null;
			await UpdateData();
		}
	}

	private void OnCancel()
	{
		confirmation?.Hide();
		Notification notification = new Notification(1, "Отмена удаления", "Отменено удаление настройки",
		SettingToBeDelete!.NameSettings);
		popupNotification.AddItem(notification);
		SettingToBeDelete = null;
	}
}
