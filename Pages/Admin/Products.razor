@page "/admin/products"
@page "/admin"
@inherits OwningComponentBase<IStoreRepository>
@inject IPopupNotification PopupNotification
@inject IFolderManager FolderManager
@using System.Globalization
@using LampStore.Models.ProductsPages

<Confirmation @ref="confirmation" OnCancel="OnCancel" OnConfirm="OnConfirm" IsConfirm="true" Title="Удаление товара...">
	<div class="toast-body">
		Вы уверены что хотите удалить товар
		@if (ProductToBeDelete != null)
		{
			<p>@ProductToBeDelete.Name ?</p>
		}
	</div>
</Confirmation>
<div class="admin-notification__wrapper">
	<Popup ListNotifications="ListNotifications" />
</div>


@if (loading)
{
	<div class="lds-spinner">
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
</div>
}
else
{
	<table class="table table-sm table-striped table-bordered">
	<thead>
		<tr>
			<th>ID</th>
			<th>Изображение</th>
			<th>Название</th>
			<th>Артикул</th>
			<th>Категория</th>
			<th>Цена</th>
			<th>Скидка %</th>
			<th>Старая цена</th>
			<th>Опубликован</th>
			<td />
		</tr>
	</thead>
	<tbody>
		@if (ProductData?.Count() > 0)
			{
				@foreach (Product p in ProductData)
				{
					<tr>
						<td>@p.Id</td>
						<td><img class="img-fluid" style="height: 80px;" src="@p.MainPhoto"></td>
						<td>@p.Name</td>
						<td>@p.Artikul</td>
						<td>@p.Category?.CategoryName</td>
						<td>@p.Price.ToString("c", new CultureInfo("ru-RU"))</td>
						<td>@p.Discount</td>
						<td>@p.OldPrice?.ToString("C", new CultureInfo("ru-RU"))</td>
						@{
							var isPublished = p.IsPublished ? "Да" : "Нет";
						}
						<td>@isPublished</td>
						<td class="text-center">
							<NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(p.Id)">
								Подробнее
							</NavLink>
							<NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(p.Id)">
								Изменить
							</NavLink>
							<button class="btn btn-danger btn-sm" @onclick="@(e => DeleteProduct(p))">
								Удалить
							</button>
						</td>
					</tr>
				}
			}
			else
			{
				<tr>
					<td colspan="5" class="text-center">Товары, не найдены.</td>
				</tr>
			}
		</tbody>
	</table>
}

<NavLink class="btn btn-primary" href="/admin/products/create">Добавить</NavLink>

@code {
	public IStoreRepository Repository => Service;
	public IEnumerable<Product> ProductData { get; set; } = Enumerable.Empty<Product>();

	public List<Category>? DisplayedCategories { get; set; }

	private bool loading = false;


	protected override async Task OnInitializedAsync()
	{
		try
		{
			loading = true;
			await UpdateData();
			loading = false;
		}
		catch (InvalidOperationException ex)
		{
			Console.WriteLine("Исключение InvalidOperationException Products: " + ex.Message);
			loading = true;
			await UpdateData();
			loading = false;
		}
	}

	public async Task UpdateData()
	{
		DisplayedCategories = await Repository.Category.Select(c => c).Distinct().ToListAsync(); //получение категорий
		ProductData = await Repository.Products.ToListAsync();
	}

	public void DeleteProduct(Product p)
	{
		ProductToBeDelete = p;
		confirmation?.Show();
	}

	public string GetDetailsUrl(long id) => $"/admin/products/details/{id}";
	public string GetEditUrl(long id) => $"/admin/products/edit/{id}";

	Confirmation? confirmation;
	private Product? ProductToBeDelete { get; set; }
	
	private const string UrlPath = "wwwroot/imegs/img-products/";
	
	private async Task OnConfirm()
	{
		if (ProductToBeDelete != null)
		{
			FolderManager.DeleteDirectory(UrlPath + ProductToBeDelete.Id);
			await Repository.DeleteProductAsync(ProductToBeDelete);
			confirmation?.Hide();
			Notification notification = new Notification(1, "Товар удалён", "Удалён товар", ProductToBeDelete!.Name);
			PopupNotification.AddItem(notification);
			ProductToBeDelete = null;
			await UpdateData();
		}
	}

	private void OnCancel()
	{
		confirmation?.Hide();
		Notification notification = new Notification(1, "Отмена удаления", "Отменено удаление товара", ProductToBeDelete!.Name);
		PopupNotification.AddItem(notification);
		ProductToBeDelete = null;
	}

	private List<Notification> ListNotifications { get; set; } = new();

	protected override async Task OnParametersSetAsync()
	{
		ListNotifications = await PopupNotification.GetItems();
		StateHasChanged();
	}
}
