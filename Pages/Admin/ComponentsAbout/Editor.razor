@page "/admin/about/edit/{id:long}"
@page "/admin/about/create"
@inherits OwningComponentBase<IAboutPageRepository>
@inject IPopupNotification popupNotification
@inject IFolderManager folderManager

<h3 class="bg-@ThemeColor text-white text-center p-1">@TitleText о компании</h3>
<TabControl>
	<TabPage Text="Основное" IsActive="true">
		<h1 class="">Свойства</h1>
		<EditForm Model="AboutPage" OnValidSubmit="SaveAboutPage" id="creatAboutPageForm">
			<DataAnnotationsValidator />
			<div class="row row-cols-2">
				<div class="col">
					@if (AboutPage!.ID != 0)
					{
						<div class="form-group mb-4">
							<label>ID</label>
							<input class="form-control" disabled value="@AboutPage.ID" />
						</div>
					}
					<div class="form-group mb-4">
						<label>Заголовок 1го блока</label>
						<ValidationMessage For="@(() => AboutPage.HeadingOneNode)" />
						<InputText class="form-control" @bind-Value="AboutPage.HeadingOneNode" />
					</div>
					<div class="form-group mb-4">
						<label>Описание страницы 1го блока</label>
						<ValidationMessage For="@(() => AboutPage.ParagraphOneNode)" />
						<InputTextArea class="form-control" @bind-Value="AboutPage.ParagraphOneNode" />
					</div>
					<div class="form-group mb-4">
						<label>Показывать на главной</label>
						<InputCheckbox class="" @bind-Value="AboutPage.DisplayHomePage" />
					</div>
				</div>
				<div class="col">
					<div class="form-group">
						<img class="img-fluid" style="height: 250px;" src=@AboutPage.ImgOneUrl>
					</div>
				</div>
			</div>
		</EditForm>
	</TabPage>
	<TabPage Text="Галерея" IsActive=@TabIsActive>
		<EditForm Model="AboutPage" OnValidSubmit="SaveAboutPage" id="creatAboutPageForm">
			<DataAnnotationsValidator />
			<div class="form-group mb-4">
				<img class="img-fluid" style="height: 250px;" src="@AboutPage.ImgOneUrl">
				<label>Изображение</label>
				<ImgManagerControl @bind-ChildName="AboutPage.ImgOneUrl" PathFolder="@urlPath"
					FolderName="@AboutPage.ID.ToString()" IsSlider="false" />
			</div>
		</EditForm>
	</TabPage>
	<TabPage Text="Доп. блок" IsActive="@TabIsActive">
		<EditForm Model="AboutPage" OnValidSubmit="SaveAboutPage" id="creatAboutPageForm">
			<DataAnnotationsValidator />
			<div class="row row-cols-2">
				<div class="col">
					<div class="form-group">
						<label>Заголовок 2го блока</label>
						<InputText class="form-control" @bind-Value="AboutPage.HeadingTwoNode" />
					</div>
					<div class="form-group">
						<label>Описнаие для 2го блока</label>
						<InputTextArea class="form-control" @bind-Value="AboutPage.ParagraphTwoNode" />
					</div>
				</div>
				<div class="col">
					<div class="form-group">
						<img class="img-fluid" style="height: 250px;" src=@AboutPage.ImgTwoUrl>
						<label>Картинка для 2го блока</label>
						<ImgManagerControl @bind-ChildName="AboutPage.ImgTwoUrl" PathFolder="@urlPath"
							FolderName="@AboutPage.ID.ToString()" IsSlider="false" />
					</div>
				</div>
			</div>
			@* <div class="form-group">
			<label>Ссылка на видео 1</label>
			<img class="img-fluid" style="height: 250px;" src=@AboutPage.VideoOneUrl>
			<InputText class="form-control" @bind-Value="AboutPage.VideoOneUrl" />
			</div>
			<div class="form-group">
			<label>Ссылка на видео 2</label>
			<img class="img-fluid" style="height: 250px;" src=@AboutPage.VideoTwoUrl>
			<InputText class="form-control" @bind-Value="AboutPage.VideoTwoUrl" />
			</div> *@
		</EditForm>
	</TabPage>
</TabControl>
<div class="mt-2">
	<button form="creatAboutPageForm" type="submit" class="btn btn-@ThemeColor">Сохранить</button>
	<NavLink class="btn btn-secondary" href="/admin/about">Отмена</NavLink>
</div>

@code {

	public IAboutPageRepository Repository => Service;

	[Inject]
	public NavigationManager? NavManager { get; set; }

	[Parameter]
	public long Id { get; set; } = 0;
	public AboutPage AboutPage { get; set; } = new AboutPage();
	public bool TabIsActive { get; set; } = false;


	protected override void OnInitialized()
	{
		if (Id != 0)
		{
			TabIsActive = true;
		}
	}

	protected override void OnParametersSet()
	{
		if (Id != 0)
		{
			AboutPage = Repository.AboutPages.FirstOrDefault(с => с.ID == Id) ?? new();
		}
	}

	private string urlPath = "imegs/img-about/";
	public async Task SaveAboutPage()
	{
		if (Id == 0)
		{
			Repository.CreateAboutPage(AboutPage);
			await folderManager.CeateDirectoryAsync(urlPath, Convert.ToInt64(AboutPage.ID));
			if (AboutPage.ID != 0)
			{
				TabIsActive = true;
				GetEditUrl(Convert.ToInt64(AboutPage.ID));
				NavManager?.NavigateTo(GetEditUrl(Convert.ToInt64(AboutPage.ID)));
				Notification notification = new Notification(1, "Старница сохранена", "Страница о компании добавлена", AboutPage.HeadingOneNode);
				popupNotification.AddItem(notification);
				StateHasChanged();
			}
		}
		else
		{
			Repository.SaveAboutPage(AboutPage);
			Notification notification = new Notification(1, "Изменения сохранены", "Запись отредактирована: Страница о компании под номером", Id.ToString());
			popupNotification.AddItem(notification);
			NavManager?.NavigateTo("/admin/about");
		}
	}
	public string GetEditUrl(long id) => $"/admin/about/edit/{id}";

	public string ThemeColor => Id == 0 ? "primary" : "warning";
	public string TitleText => Id == 0 ? "Создание" : "Редактирование";
}
