@page "/admin/about"
@inherits OwningComponentBase<IAboutPageRepository>
@inject IPopupNotification popupNotification
@inject IFolderManager folderManager

<Confirmation @ref="confirmation" OnCancel="OnCancel" OnConfirm="OnConfirm" IsConfirm="true"
	Title="Удаление страницы о компании...">
	<div class="toast-body">
		Вы уверены что хотите удалить запись
		@if (AboutPageToBeDelete != null)
		{
			<p>@AboutPageToBeDelete.HeadingOneNode ?</p>
		}
	</div>
</Confirmation>
<div class="admin-notification__wrapper">
	<Popup ListNotifications="ListNotifications" />
</div>

<table class="table table-sm table-striped table-bordered">
	<thead>
		<tr>
			<th>ID</th>
			<th>Заголовок 1</th>
			<th>Изображение</th>
			<th>Описание страницы 1</th>
			<th>Показывать на главной</th>
			<td />
		</tr>
	</thead>
	<tbody>
		@if (AboutPageData?.Count() > 0)
		{
			@foreach (AboutPage a in AboutPageData)
			{
				<tr>
					<td>@a.ID</td>
					<td>@a.HeadingOneNode</td>
					<td><img class="img-fluid" style="height: 80px;" src=@a.ImgOneUrl></td>
					<td>@a.ParagraphOneNode</td>
					<td>@a.DisplayHomePage</td>
					<td class="text-center">
						<NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(a.ID ?? 0)">
							Изменить
						</NavLink>
						<button class="btn btn-danger btn-sm" @onclick="@(e => DeleteAboutPage(a))">
							Удалить
						</button>
					</td>
				</tr>
			}
		}
		else
		{
			<tr>
				<td colspan="5" class="text-center">Записи, не найдены.</td>
			</tr>
		}
	</tbody>
</table>
<NavLink class="btn btn-primary" href="/admin/about/create">Добавить</NavLink>

@code {
	public IAboutPageRepository Repository => Service;
	public IEnumerable<AboutPage> AboutPageData { get; set; } = Enumerable.Empty<AboutPage>();

	protected async override Task OnInitializedAsync()
	{
		try
		{
			await UpdateData();
		}
		catch (InvalidOperationException ex)
		{
			Console.WriteLine("Исключение InvalidOperationException About: " + ex.Message);
		}
	}

	public async Task UpdateData()
	{
		AboutPageData = await Repository.AboutPages.ToListAsync();
	}

	public void DeleteAboutPage(AboutPage aboutPage)
	{
		AboutPageToBeDelete = aboutPage;
		confirmation?.Show();
	}

	public string GetEditUrl(long id) => $"/admin/about/edit/{id}";
}

@code {
	Confirmation? confirmation;
	private AboutPage? AboutPageToBeDelete { get; set; }
	private string urlPath = "wwwroot/imegs/img-about/";
	private async Task OnConfirm()
	{
		if (AboutPageToBeDelete != null)
		{
			folderManager.DeleteDirectory(urlPath + AboutPageToBeDelete.ID);
			Repository.DeleteAboutPage(AboutPageToBeDelete);
			confirmation?.Hide();
			Notification notification = new Notification(1, "Удаление записи", "Удалена страницы о компании",
			AboutPageToBeDelete.HeadingOneNode);
			popupNotification.AddItem(notification);
			AboutPageToBeDelete = null;
			await UpdateData();
		}
	}

	private void OnCancel()
	{
		confirmation?.Hide();
		Notification notification = new Notification(1, "Отмена удаления", "Отменено удаление страницы о компании",
		AboutPageToBeDelete!.HeadingOneNode);
		popupNotification.AddItem(notification);
		AboutPageToBeDelete = null;
	}

	private List<Notification> ListNotifications { get; set; } = new();

	protected override async Task OnParametersSetAsync()
	{
		ListNotifications = await popupNotification.GetItems();
		StateHasChanged();
	}
}